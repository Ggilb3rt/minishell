What is a shell?

The shell is a program that interacts with the user through a terminal or takes the input from a file and executes a
sequence of commands that are passed to the Operating System.

https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
------------------------------------------------------------------------------------------------------------------------
Writing a shell :

- Get into a loop the input of the user
- Parsing of the user input
- Executing the command
- builtins
- environment

https://segfault42.github.io/posts/minishell/
------------------------------------------------------------------------------------------------------------------------
What is a shell program?

A shell program is an application that allows interacting with the computer. In a shell the user can run programs and
also redirect the input to come from a file and output to come from a file. Shells also provide programming
constructions such as if, for, while, functions, variables etc. Additionally, shell programs offer features such
as line editing, history, file completion, wildcards, environment variable expansion, and programming constructions.

https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
------------------------------------------------------------------------------------------------------------------------
What are the differents parts of a shell?

The shell implementation is divided into three parts : The parser, the executor and the shell subsystems.
- The parser will reads the command line and puts it into a data structure called Command Table that will store the
commands that will be executed.
- The executor will take the command table generated by the parser and for every simple command in the array it will
create a new process. It will also if necessary create pipes to communicate the output of one process to the input
of the next one. Additionally it will redirect the standard input, standard output and standard error if there are any
redirections.
            _____________________________________
           |  ___   ___   ___   ____             |
           V |   V |   V |   V |    V            |
            A  |  B  |  C  |  D  >  outfile  <  infile  2>  errfile

- Other subsystems that complete your shell are : environment variables, wildcards, subshells (arguments between ''
are executed and the output is sent as input to the shell.
------------------------------------------------------------------------------------------------------------------------
How to implement a parser?

A parser is divided into two parts: A Lexical Analyzer or Lexer takes the input characters and puts the characters
together into words called tokens, and a parser that processes the tokens according to a grammar and build the
command table.

https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
------------------------------------------------------------------------------------------------------------------------
How to communicate between processes?

                                parent
                                   |
                                   |
                                   V
                       _____________________________
                       |   _______________________  |
                       |   | text (instructions) |  |
                       |   |        data         |  |
                       |   -----------------------  |
                       |----------------------------|
                       |   _______________________  |
                       |   | ressources (open    |  |
                       |   |   files, etc...)    |  |
                       |   -----------------------  |
                       |____________________________|
                                    |
                                    |
                                    V
                                 ________
                   --------------|fork()|-------------
                   |             --------            |
                   |                                 |
                   V                                 V
    --------------------------             ---------------------------
    | ----------------------  |            | -----------------------  |
    | | fork() returns the  | | user       | | fork() return 0 in   | | user
    | | PID of the created  | | space      | | the created child    | | space
    | | child in the parent | |            | ---------------------- | |
    |  ---------------------  |write       | -----------------------  |
    |-------------------------|  ==pipe==> |_| the child process is |_|
    | ----------------------- |        read| | a copy of the parent | |
    | | ressources (open    | | kernel     |  ----------------------  | kernel
    | | files, etc)         | | space      |  ----------------------  | space
    | ----------------------- |            |  | ressources (open    | |
    |_________________________|            |  | files, etc)         | |
                                           |   ---------------------  |
                                           ----------------------------


                                  parent
                                    |
                                    |
                                    V
                parent  --------- fork() --------- child
                        |                         |
                        |                         V
                        |                       exec()
                        |                         |
                        V         status          V
                      wait() <----------------- exit()
                        |
                        V
                      parent


https://www.youtube.com/watch?v=Mqb2dVRe0uo&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY&index=6
------------------------------------------------------------------------------------------------------------------------
What allows us the stat functions (stat(), fstat(), lstat()) to do?

Every file stores different types of information about themselves :
- type of file
- access permission
- number of hard links of a file
- the file owner user ID
- the file group ID
- the file size in bytes
- the last time the file was accessed
- the last time the file was modified
- the last time the file access permission UID, GID or hard link count was last changed
- the system inode number of the file (unique ID of filesystem)
- the filesystem ID where the file is stored

https://www.youtube.com/watch?v=jOl0ezOuoNE
------------------------------------------------------------------------------------------------------------------------
What is a tty?

A tty is an direct interface between the user and the machine. A terminal is generally just an emulated tty,
that we call a pty.

https://www.howtogeek.com/428174/what-is-a-tty-on-linux-and-how-to-use-the-tty-command/
https://www.youtube.com/watch?v=SYwbEcNrcjI
------------------------------------------------------------------------------------------------------------------------
How to use the termcap library?

- tgetent initialises termcap
- tgetnum displays all numeric datas link to the terminal (cols, rows,...)
- tgetflag returns boolean instead of value
- tgetstr get termcap
- tputs executes termcap
    example :   char *cl_cap = tgetstr("cl", NULL);
                tputs(cl_clap, 1, putchar);

list of the most used termcaps :
- co : number of columns displayed on the screen
- li : number of lines displayed on the screen
- AF : defined color of text
- AB : defined color of background
- md : display text in bold
- us : display text underlined
- mb : display text blinking
- cm : moves cursor to the wished coordinates
- cl : clear the text on the screen
- me : cancel all changes
- os : overstrike, if the terminal erases or not the content when a rewriting (for example backspace)


https://www.gnu.org/software/termutils/manual/termcap-1.3/html_mono/termcap.html
------------------------------------------------------------------------------------------------------------------------
What is termios?

Stores data of communication.
Termios is responsible for :
- Line buffering
- Echo
- Line editing
- Newline translation
- Signal generation
                                input
                ------------------------------------------>
Console ======= master pty ======== termios ====== slave pty ======== shell
                <------------------------------------------
                                output

https://blog.nelhage.com/2009/12/a-brief-introduction-to-termios/